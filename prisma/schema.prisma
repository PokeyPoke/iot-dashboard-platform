// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SubscriptionTier {
  FREE
  PREMIUM
}

enum WidgetType {
  STOCK
  WEATHER
  CRYPTO
  NEWS
  SPORTS
  TRANSIT
  CUSTOM
  LINE_CHART
  GAUGE
  INDICATOR
  TEXT_DISPLAY
  BAR_CHART
}

enum DeviceType {
  ESP32_DISPLAY
  ARDUINO
  RASPBERRY_PI
  CUSTOM
}

enum ServiceName {
  ALPHA_VANTAGE
  OPENWEATHER
  COINAPI
  NEWS_API
  ESPN_API
  TRANSIT_API
}

model User {
  id                    String           @id @default(uuid())
  email                 String           @unique
  username              String?          @unique
  passwordHash          String
  subscriptionTier      SubscriptionTier @default(FREE)
  apiRateLimitRemaining Int              @default(1000)
  lastLogin             DateTime?
  emailVerified         DateTime?
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt

  dashboards Dashboard[]
  devices    Device[]
  apiKeys    ApiKey[]
  sessions   Session[]
}

model Session {
  id           String   @id @default(uuid())
  userId       String
  refreshToken String   @unique
  expiresAt    DateTime
  createdAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([refreshToken])
}

model Dashboard {
  id           String   @id @default(uuid())
  userId       String
  name         String
  layoutConfig Json     @default("{}")
  isDefault    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  widgets Widget[]

  @@index([userId])
}

model Widget {
  id              String     @id @default(uuid())
  dashboardId     String
  widgetType      WidgetType
  title           String
  config          Json       @default("{}")
  deviceToken     String?    // For IoT widgets - links to Device.apiToken
  dataField       String?    // For IoT widgets - JSON path to data field
  positionX       Int        @default(0)
  positionY       Int        @default(0)
  width           Int        @default(4)
  height          Int        @default(3)
  refreshInterval Int        @default(300) // seconds
  isActive        Boolean    @default(true)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  dashboard Dashboard @relation(fields: [dashboardId], references: [id], onDelete: Cascade)

  @@index([dashboardId])
  @@index([deviceToken])
}

model Device {
  id           String     @id @default(uuid())
  userId       String
  deviceName   String
  deviceType   DeviceType
  apiToken     String     @unique
  mqttTopic    String     @unique
  lastSeen     DateTime?
  deviceConfig Json       @default("{}")
  isActive     Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([apiToken])
}

model ApiKey {
  id           String      @id @default(uuid())
  userId       String
  serviceName  ServiceName
  encryptedKey String
  isActive     Boolean     @default(true)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, serviceName])
  @@index([userId])
}